#!/usr/bin/env ruby

require_relative '../config/boot'
$LOAD_PATH.unshift File.expand_path(File.join(__dir__, '../lib/'))

require 'rmt'
require 'rmt/mirror'
require 'rmt/config'
require 'rmt/repo_manager'

require 'active_record'
require 'terminal-table'
require "thor"

require_relative '../app/models/application_record.rb'

Dir[File.join(__dir__, '..', 'app', 'models', '**', '*.rb')].each { |file| require File.expand_path(file) }

db_config_path = File.join(__dir__, '../config/database.yml')
db_config = YAML.safe_load(ERB.new(File.read(db_config_path)).result, [], [], true)

ActiveRecord::Base.establish_connection(db_config['development'])


class MyCLI < Thor
  desc "list", "List all repositories"
  option :all, type: :boolean
  def list
    scope = options[:all] ? :all : :enabled
    RMT::RepoManager.new(ARGV, STDOUT).list_repositories(scope: scope)
  end

  desc "disable TARGET", "Disable a repository or product"
  def disable(target)
    repo_id = Integer(target, 10) rescue nil # Is the user input an Integer?
    if repo_id
      RMT::RepoManager.new(ARGV, STDOUT).change_repository_mirroring(false, repo_id)
    else
      identifier, version, arch = target.split('/')
      RMT::RepoManager.new(ARGV, STDOUT).change_product_mirroring(false, identifier, version, arch)
    end
  end

  desc "enable TARGET", "Enable a repository or product"
  option 'exclude-optional', aliases: '-x', default: true, type: :boolean
  def enable(target)
    repo_id = Integer(target, 10) rescue nil # Is the user input an Integer?
    if repo_id
      RMT::RepoManager.new(ARGV, STDOUT).change_repository_mirroring(true, repo_id)
    else
      identifier, version, arch = target.split('/')
      RMT::RepoManager.new(ARGV, STDOUT).change_product_mirroring(true, identifier, version, arch, exclude_optional: options['exclude-optional'])
    end
  end

  desc "version", "Show version"
  def version
    puts RMT::VERSION
  end
end

MyCLI.start(ARGV)
